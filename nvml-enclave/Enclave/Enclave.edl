enclave {
    
    trusted {
        /* define ECALLs here. */
        //tell the tee to initialize
        public sgx_status_t ecallInit();
        //tell the TEE it's time to grab data
        public sgx_status_t ecallGetData();
    };

    untrusted {
        /* define OCALLs here. */
        //initialize NVML & grab all device handles to store in TEE
        void getDeviceHandles(
            [in, size=32] unsigned char *tk,                     // Input: tempkey for hmac
            [out, size=64] void *handles, // Output: Array of GPU handles
            [out] size_t *numHandles                // Output: Number of retrieved handles
        );
        //ocall to grab gpu data + hmac it
        void pollGPU(
            [in, size=32] unsigned char *tk,
            [in, size = 8] void *handle,
            [out] unsigned int *temperature,
            [out] unsigned int *clock_speed,
            [out] unsigned int *memory_used,
            [out] unsigned int *power,
            [out, size=32] unsigned char *hmac
        );

        // DEBUG function for printing from enclave
        void enclavePrintf([in, string] const char *str);

        /* GRANULAR! Can implement later, but higher overhead
        
        // securely get temperature signed with tk
        void getTemp([in, size=32] unsigned char *tk,
            [in] uintptr_t handle, 
            [out] unsigned int *temperature);
        // securely get clock speed signed with tk
        void getQuokk([in, size=32] unsigned char *tk, 
            [in] uintptr_t handle, 
            [out] unsigned int *quokk);
        // securely get memory usage signed with tk
        void getMem([in, size=32] unsigned char *tk,
            [in] uintptr_t handle, 
            [out] unsigned int *memory);
        // securely get power usage signed with tk
        void getPow([in, size=32] unsigned char *tk,
            [in] uintptr_t handle, 
            [out] unsigned int *power);

        */
    };
};
